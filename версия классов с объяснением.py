import requests
import json

'''
# создаем коробку с инструментами
круглые скобки после имени класса нужны если класс от чего-то наследуется например
Rate_2(Rate_1)

class Rate:

# три независимых функции которые потом можно будет применить

# у каждой есть одна переменная-по-умолчанию, т.н. self, она ни на что не влияет
# она нужна, что бы вызов функции формально записывался единообразно
# с точки зрения синтаксиса, вне зависимости от того, применяем ли мы ее к чему-то
# или вызываем саму без аргументов, т.е что бы работал как вариант excange_rates()
# когда функция ничего не получает, а только выдает ответ, так и max_rate(a) когда 
# она применена к переменной а


# эта функция ничего не принимает, а просто возвращает данные из запроса
# что бы обратится к ней надо цепочкой обратится к классу, а потом функции
# a = Rate().excange_rates()
#


    def excange_rates(self):
        return requests.get('https://www.cbr-xml-daily.ru/daily_json.js').json()

# эта функция уже принимает на вход переменную и обсчитывает ее, печатая ответ
# обращение к  ней выглядит так
# b = Rate().max_rate(a)


    def max_rate(self, full_data):
        max_rate_code = max(full_data['Valute'], key=lambda v: full_data['Valute'][v]['Value'])
        print(max_rate_code)

# эта функция просто пишет файл
    def data_file(self):
        with open('data.txt', 'w') as f:
            json.dump(full_data, f, ensure_ascii=False)



# в принципе создавать отдельный экземпляр класса не обязательно
# вроде как обязательно!! уточнение, сначала нужно вызвать класс, создав хоть один объект
это можно сделать просто написав его Rate() или связав с переменной что бы не потерять
rate = Rate()

a = Rate().excange_rates()
b = Rate().max_rate(a)
'''

# если мы хотим вытаскивать переменные из функций
# например, на случай когда функция ничего не возвращает
# (или если мы хотим их использовать в других функциях), то они должны
# быть особым образом объявлены через sefl, например, так

class Test:
    def __init__(self):
        self.variable_1 = 
    def function_1(self):
        self.variable_1 = 'function 1'
    def function_2(self):
        print(self.variable_1)

test = Test()

