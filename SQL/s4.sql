
======================== Создание таблиц ========================

create database название_базы

create schema lecture_4

set search_path to lecture_4

1. Создайте таблицу "автор" с полями:
- id 
- имя
- псевдоним (может не быть)
- дата рождения
* Используйте 
    CREATE TABLE table_name (
        column_name TYPE column_constraint,
    );
* для id подойдет serial, ограничение primary key
* Имя и дата рождения - not null
* псевдоним - ограничений нет

create table author (
	id serial primary key,
	author_name varchar(50) not null unique, 
	nick_name varchar(50),
	born_date date not null,
	create_date timestamp default now()
)


1*  Создайте таблицу "Произведения" с полями: id произведения, год, название, id автора
* для id произведения подойдет serial, ограничение primary key
* название - not null
* год > 0 CHECK (год > 0)
* id автора пока оставьте без ограничений

create table books (
	id serial primary key,
	book_name varchar(100) not null, 
	book_year int2 check (book_year between 1000 and 2100) not null, --inn varchar(12) check (length(inn) = 12)
	author_id int2
)

create table books (
	id serial primary key,
	book_name varchar(100) not null, 
	book_year int2 check (book_year between 1000 and 2100) not null, --inn varchar(12) check (length(inn) = 12)
	author_id int2 references author(id)
)

======================== Заполнение таблицы ========================

2. Вставьте данные по 3-м любым писателям в таблицу авторов:
Жюль Габриэль Верн, 08.02.1828
Михаил Юрьевич Лермонтов, Гр. Диарбекир, 03.10.1814
Харуки Мураками, 12.01.1949
* Можно вставлять несколько строк одновременно:
    INSERT INTO table (column1, column2, …)
    VALUES
     (value1, value2, …),
     (value1, value2, …) ,...;

select * from author a

insert into author (author_name, nick_name, born_date)
values ('Жюль Габриэль Верн', null, '08.02.1828'),
	('Михаил Юрьевич Лермонтов', 'Гр. Диарбекир', '03.10.1814'),
	('Харуки Мураками', null, '12.01.1949')

null !== ''     
	
2. Вставьте данные по 5-м любым произведениям, id автора - заполните NULL:
Двадцать тысяч льё под водой, 1916
Бородино, 1837
Герой нашего времени, 1840
Норвежский лес, 1980
Хроники заводной птицы, 1994

insert into books (book_name, book_year)
select unnest(array['Двадцать тысяч льё под водой','Бородино','Герой нашего времени',
	'Норвежский лес','Хроники заводной птицы']),
	unnest(array[1916, 1837, 1840, 1980, 1994])
	
insert into books (book_name, book_year)
values ('Новые данные', 1916)
	
select * from books b	

insert into books (
from "dvd-rental".film fbook_name, book_year)
select f.title, f.release_year

delete from books

SELECT setval('books_id_seq', 1)

select * from books_id_seq

alter sequence books_id_seq restart with 1

======================== Модификация таблицы ========================


3. Добавьте поле "место рождения" в таблицу с авторами
* ALTER TABLE table_name 
  ADD COLUMN new_column_name TYPE;
 
 select * from author a
 select * from books b	
 
alter table author add column born_place varchar(50) 

alter table author alter column born_place set not null
 
 3* В таблице произведений измените колонку id автора - внешний ключ - ссылка на авторов
 * ALTER TABLE table_name ADD CONSTRAINT constraint_name constraint_definition
 
alter table books add constraint books_author_fkey 
	foreign key (author_id) references author(id)
 
 select * from author a;
 select * from books b	

 ======================== Модификация данных ========================

4. Обновите данные, проставив корректное место рождения
писателю:
Жюль Габриэль Верн - Франция
Михаил Юрьевич Лермонтов - Российская Империя
Харуки Мураками - Япония
* UPDATE table
  SET column1 = value1,
   column2 = value2 ,...
  WHERE
   condition;

select * from author a;

update author
set born_place = 'Франция'
where id = 1

update author
set born_place = 'Российская Империя'
where id = 2

update author
set born_place = 'Япония'
where id = 3

4*. В таблице произведений проставьте id авторов:

Жюль Габриэль Верн: 
    Двадцать тысяч льё под водой
Михаил Юрьевич Лермонтов: 
    Бородино
    Герой нашего времени
Харуки Мураками:
    Норвежский лес
    Хроники заводной птицы

select * from books b	
    
update books
set author_id = 1
where id = 1

update books
set author_id = 2
where id in (7,8)

update books
set author_id = (select id from author where author_name = 'Харуки Мураками')
where id in (9,10)
 
 ======================== Удаление данных ========================
 
 5. Удалите произведение " Двадцать тысяч льё под водой"

delete from books 
where id = 1

delete from books 

select * from books b

5.1 Удалить автора 

delete from author 
where id = 2

select * from author a

truncate author cascade

drop table author

drop schema lecture_4

drop database

select alm_sales_amount1('2007-02-17', '2007-02-20')

create trigger update_rental_date
before update on rental
for each row execute procedure update_last_rental_date();

create table test (
	id serial
)

select * from test333

insert into test333 (id)
values (1), (2)

update test333
set id = 5
where id = 1

create function f5 (out x numeric) as $$
begin 
	select count(*) from test333 into x;
end;
$$ language plpgsql

select f5()

alter table test333 add column last_update timestamp

alter table test333 rename to test222

create trigger last_updated before
update
    on
    "dvd-rental".test for each row execute procedure "dvd-rental".last_updated()

 ======================================================= Сложные типы данных =======================================================
 
 ======================== json ========================
 Создайте таблицу orders
 
CREATE TABLE orders (
     ID serial PRIMARY KEY,
     info json NOT NULL
);

INSERT INTO orders (info)
VALUES
 (
'{ "customer": "John Doe", "items": {"product": "Beer","qty": 6}}'
 ),
 (
'{ "customer": "Lily Bush", "items": {"product": "Diaper","qty": 24}}'
 ),
 (
'{ "customer": "Josh William", "items": {"product": "Toy Car","qty": 1}}'
 ),
 (
'{ "customer": "Mary Clark", "items": {"product": "Toy Train","qty": 2}}'
 );
 
select * from orders

INSERT INTO orders (info)
VALUES
 (
'{ "a": { "a": { "a": { "a": { "a": { "c": "b"}}}}}}'
 )
 
|{название_товара: quantity, product_id: quantity, product_id: quantity}|общая сумма заказа|


6. Выведите общее количество заказов:
* CAST ( data AS type) преобразование типов
* SUM - агрегатная функция суммы
* -> возвращает JSON
*->> возвращает текст

select pg_typeof(info->'items'->'qty')
from orders

select pg_typeof(info->'items'->>'qty')
from orders

select sum((info->'items'->>'qty')::numeric)
from orders

select info->'a'->'a'->'a'->'a'->'a'->>'c'
from orders

6*  Выведите среднее количество заказов, продуктов начинающихся на "Toy"

select avg((info->'items'->>'qty')::numeric)
from orders
where info->'items'->>'product' ilike 'toy%'

======================== array ========================
7. Выведите сколько раз встречается специальный атрибут (special_features) у
фильма -- сколько элементов содержит атрибут special_features
* array_length(anyarray, int) - возвращает длину указанной размерности массива

'a,b,c,d,d,d'
['a','b','c','d','d','d']

select title, special_features
from film 

select title, array_length(special_features, 1), special_features
from film 

select array_length('{{1,2,3,4,5},{1,2,3,4,5},{1,2,3,4,5}}'::text[], 1)

select array_length('{{1,2,3,4,5},{1,2,6,4,5},{1,2,3,4,5}}'::text[], 2)

select cardinality('{{1,2,3,4,5},{1,2,3,4,5},{1,2,3,4,5}}'::text[])

array_length возвращает число элементов в указанной размерности массива:

select f.title, cardinality (f.special_features) as "Количество"
from film f

cardinality возвращает общее число элементов массива по всем измерениям. 
Фактически это число строк, которое вернёт функция unnest:

7* Выведите все фильмы содержащие специальные атрибуты: 'Trailers','Commentaries'
* Используйте операторы:
@> - содержит
<@ - содержится в
*  ARRAY[элементы] - для описания массива

https://postgrespro.ru/docs/postgresql/12/functions-subquery
https://postgrespro.ru/docs/postgrespro/12/functions-array

-- ПЛОХАЯ ПРАКТИКА --
explain analyze
select title, special_features
from film
where special_features::text ilike '%Trailers%' or special_features::text ilike '%Commentaries%'

select title, special_features
from film
where special_features[1] = 'Trailers' or special_features[1] = 'Commentaries' or
	special_features[2] = 'Trailers' or special_features[2] = 'Commentaries' or
	special_features[3] = 'Trailers' or special_features[3] = 'Commentaries' or
	special_features[4] = 'Trailers' or special_features[4] = 'Commentaries' 

-- ЧТО-ТО СРЕДНЕЕ ПРАКТИКА --
explain analyze
select title, string_agg(usf, ', ')
from (
	select film_id, title, unnest(special_features) usf
	from film) as t
where t.usf = 'Trailers' or t.usf = 'Commentaries'
group by film_id, title

-- ХОРОШАЯ ПРАКТИКА --
explain analyze
select title, special_features, array_position(special_features, 'Trailers')
from film
where array_position(special_features, 'Trailers') is not null or 
	array_position(special_features, 'Commentaries') is not null
	
select title, special_features, array_positions(special_features, 'Trailers')
from film
where cardinality(array_positions(special_features, 'Trailers')) > 0 or 
	cardinality(array_positions(special_features, 'Commentaries')) > 0 

select array_positions('{1,2,1,4,1}'::text[], '1')

explain analyze
select title, special_features
from film
where 'Trailers' = any(special_features) or 'Commentaries' = any(special_features) --any = some

select title, special_features
from film
where 'Trailers' = all(special_features) or 'Commentaries' = all(special_features) 

explain analyze
select title, special_features
from film
where  special_features @> array['Trailers'] or special_features @> array['Commentaries'] 

select title, special_features
from film
where  special_features <@ array['Trailers'] or special_features <@ array['Commentaries'] 
	or special_features <@ array['Trailers', 'Commentaries']

explain analyze
select title, special_features
from film
where  special_features && array['Trailers'] or special_features && array['Commentaries'] 